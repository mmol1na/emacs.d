#+TITLE: alele's emacs config
#+AUTHOR: Martin Molina (alele)
#+DESCRIPTION: My emacs own configuration file.


* Default User Interface
** Some defaults 
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ; No startup message

  (scroll-bar-mode -1) ; Disable visible scroll-bar
  (tool-bar-mode -1) ; Disable the tool bar
  (tooltip-mode -1) ; Disable the tooltip
  (menu-bar-mode -1) ; Disable menu bar
  (set-fringe-mode 10) ; Give some breathing room
  (setq-default indent-tabs-mode nil)
  
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode t)
#+end_src
** Font Config
#+begin_src emacs-lisp
;(set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 145 :weight 'regular)
(set-face-attribute 'default nil :font "VictorMono Nerd Font" :height 120 :weight 'semi-bold)
#+End_src
* Packages Configuration
** Setting up packages
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/") t)
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
* Keyboard 
** General Keybindings
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)
    (general-create-definer alele/leader-keys
                            :states '(normal insert visual emacs)
                            :keymaps 'override
                            :prefix "SPC"
                            :global-prefix "M-SPC")
    (alele/leader-keys
     "f"  '(:ignore t :wk "find")
     "ff" '(counsel-find-file :wk "Find File")
     "v"  '(evil-window-vsplit :wk "Vertical Split")
     "s"  '(evil-window-split :wk "Horizontal Split")

     "h"  '(evil-window-left :wk "Move to left buffer")
     "j"  '(evil-window-down :wk "Move to down buffer")
     "k"  '(evil-window-up :wk "Move to up buffer")
     "l"  '(evil-window-right :wk "Move to right buffer")
     )
    )
#+end_src  

** Which-key
#+begin_src emacs-lisp
  (use-package which-key
  :diminish which-key-mode
  :init
  (which-key-mode)
  (which-key-setup-minibuffer)
  :config
  (setq which-key-idle-delay 0.1)
  (setq which-key-prefix-prefix "◉ ")
  (setq which-key-sort-order 'which-key-key-order-alpha
        which-key-min-display-lines 3
        which-key-max-display-columns nil))
#+end_src

* Completion Configuration
** Corfu (The cmp equivalent for Emacs) 

#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                 ; Allows cycling through candidates
    (corfu-auto t)                  ; Enable auto completion
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.3)
    (corfu-popupinfo-delay '(0.5 . 0.2))
    (corfu-preview-current 'insert) ; insert previewed candidate
    (corfu-preselect 'prompt)
    (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets

    ;; Optionally use TAB for cycling, default is `corfu-complete'.
    :bind (:map corfu-map
                ("M-b"      . corfu-insert-separator)
                ("TAB"        . corfu-next)
                ([tab]        . corfu-next)
                ("S-TAB"      . corfu-previous)
                ([backtab]    . corfu-previous)
                ("S-<return>" . corfu-insert)
                ("RET"        . nil))

    :init
    (global-corfu-mode)
    (corfu-history-mode)
    (corfu-popupinfo-mode) ; Popup completion info
    :config
    (add-hook 'eshell-mode-hook
              (lambda () (setq-local corfu-quit-at-boundary t
                                     corfu-quit-no-match t
                                     corfu-auto nil)
                (corfu-mode))))


  (use-package cape
    :init
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    ;; kinda confusing re length, WIP/TODO
    ;; :hook (org-mode . (lambda () (add-to-list 'completion-at-point-functions #'cape-dabbrev)))
    ;; :config
    ;; (setq dabbrev-check-other-buffers nil
    ;;       dabbrev-check-all-buffers nil
    ;;       cape-dabbrev-min-length 6)
    )
#+end_src

** Ivy - Counsel - Swiper

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)       
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  

  (use-package counsel)
  (use-package swiper)

#+end_src

** Snippets
Configure snippets (so hard!)

#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :defer 5
    :config
    (yas-global-mode 1))
  (use-package yasnippet-snippets)

  (use-package doom-snippets
    :load-path "/home/mmolina/.local/emacs/doom_snippets"
    :after yasnippet)

  (use-package yasnippet-capf
    :after cape
    :config
    (add-to-list 'completion-at-point-functions #'yasnippet-capf))
#+end_src
** LSP config
#+begin_src emacs-lisp
(use-package lsp-mode
  :defer t
  :bind (("C-h ," . help-at-pt-buffer)
         (:map lsp-mode-map
               ("M-<return>" . lsp-execute-code-action))
         (:map c++-mode-map
               ("C-c x" . lsp-clangd-find-other-file))
         (:map c-mode-map
               ("C-c x" . lsp-clangd-find-other-file)))
  :commands (lsp lsp-deferred)
  :init
  ;; (setenv "LSP_USE_PLISTS" "1")
  ;; Increase the amount of data emacs reads from processes
  (setq read-process-output-max (* 3 1024 1024))
  (setq lsp-clients-clangd-args '("--header-insertion-decorators=0"
                                  "--clang-tidy"
                                  "--enable-config"))
  ;; General lsp-mode settings
  (setq lsp-completion-provider :none
        lsp-enable-snippet t
        lsp-enable-on-type-formatting nil
        lsp-enable-indentation nil
        lsp-diagnostics-provider :flymake
        lsp-keymap-prefix "C-x L"
        lsp-eldoc-render-all t)
  ;; to enable the lenses
  (add-hook 'lsp-mode-hook #'lsp-lens-mode)
  (add-hook 'lsp-completion-mode-hook
            (lambda ()
              (setf (alist-get 'lsp-capf completion-category-defaults)
                    '((styles . (orderless))))))
  :config
  (defun help-at-pt-buffer ()
    (interactive)
    (let ((help (help-at-pt-kbd-string))
          (h-at-p-buf "*Help At Point*"))
      (if help
          (progn (with-current-buffer (get-buffer-create h-at-p-buf)
                   (view-mode -1)
                   (erase-buffer) (insert (format "%s" (substitute-command-keys help)))
                   (view-mode +1))
                 (switch-to-buffer-other-window h-at-p-buf))
        (if (not arg) (message "No local help at point")))))
  (use-package lsp-ui
    :ensure t
    :after lsp
    :init
    (setq lsp-ui-sideline-show-code-actions t)
    (setq lsp-ui-sideline-show-diagnostics t)))

#+end_src

* Theming
** Themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :config)

  (use-package catppuccin-theme
    :ensure t
    :config
    (load-theme 'catppuccin t)
    (setq catppuccin-flavor 'mocha) ;; or 'latte, 'macchiato, or 'mocha
    (catppuccin-reload))
#+end_src

** Parenthesis styling

#+begin_src emacs-lisp
    (use-package paren
    :ensure nil
    :config
    (setq show-paren-delay 0.1
          show-paren-hightlight-openparen t
          show-paren-when-point-inside-paren t
          show-paren-when-point-in-periphery t)
    (show-paren-mode 1))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Modeline Configuration

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-buffer-file-name-style 'filename
          doom-modeline-enable-word-count t
          doom-modeline-buffer-encoding nil
          doom-modeline-icon t
          doom-modeline-modal-icon nil
          doom-modeline-major-mode-icon t
          doom-modeline-major-mode-color-icon t
          doom-modeline-bar-width 3
          doom-modeline-height 30
          )
    )
#+end_src

* Evil Mode

This is basically the vim emulation layer, basically a fully implemented vim editor inside emacs

#+begin_src emacs-lisp
(unless (package-installed-p 'evil)
  (package-install 'evil))

(setq evil-want-C-u-scroll t)
(require 'evil)
(evil-set-undo-system 'undo-redo)
(evil-mode 1)

(use-package evil-escape)
(setq-default evil-escape-key-sequence "jj")
(setq-default evil-escape-delay 0.3)
(setq evil-escape-inhibit-functions '(evil-visual-state-p))
(setq-default evil-escape-excluded-major-modes '(dired-mode neotree-mode evil-visual-state)) 
(evil-escape-mode 1)
#+end_src

* Org Mode 
** Org Mode Packages
*** Org-bullets
Firstly we just configure the bullets to look pretty :3

#+begin_src emacs-lisp
  (use-package org-superstar)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (setq org-superstar-headline-bullets-list '("✸" "✿" "⁖" "○" "◉"))
#+end_src

*** Evil-org
#+begin_src emacs-lisp
(use-package evil-org
  :diminish evil-org-mode
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme))))

(require 'evil-org-agenda)
(evil-org-agenda-set-keys)
#+end_src
*** Org-appear
#+begin_src emacs-lisp
  (use-package org-appear
  :commands (org-appear-mode)
  :hook (org-mode . org-appear-mode)
  :init
  (setq org-hide-emphasis-markers t             ;; A default setting that needs to be t for org-appear
        org-appear-autoemphasis t               ;; Enable org-appear on emphasis (bold, italics, etc)
        org-appear-autolinks nil                ;; Don't enable on links
        org-appear-autosubmarkers t))   ;; Enable on subscript and superscript
#+end_src

** Org Startup
*** Org Setup
#+begin_src emacs-lisp
  (defun alele/org-setup()
    (org-indent-mode)
    (visual-line-mode 1)

    (setq-local line-spacing 1)
    )
#+end_src

** Org Mode Config
*** Preamble
#+begin_src emacs-lisp
(use-package org
  ;; :pin elpa
  :hook (org-mode . alele/org-setup)
  :hook (org-capture-mode . evil-insert-state) ;; Start org-capture in Insert state by default
  :diminish org-indent-mode
  :diminish visual-line-mode
  :config
#+end_src
*** Visuals
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t) ;; Syntax highlighting in org src blocks
  (setq org-highlight-latex-and-related '(native)) ;; Highlight inline LaTeX
  (setq org-startup-folded 'showeverything)
  (setq org-image-actual-width 300)
  (setq org-fontify-whole-heading-line t)
  (setq org-pretty-entities t)
#+end_src
*** Problem?
#+begin_src emacs-lisp
  (evil-org-mode))

#+end_src



* Terminal
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src

