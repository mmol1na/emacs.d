#+TITLE: alele's emacs config
#+AUTHOR: Martin Molina (alele)
#+DESCRIPTION: My emacs own configuration file.

* Default User Interface
** Some defaults 
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ; No startup message
  (byte-compile-disable-warning t)
  (scroll-bar-mode -1) ; Disable visible scroll-bar
  (tool-bar-mode -1) ; Disable the tool bar
  (tooltip-mode -1) ; Disable the tooltip
  (menu-bar-mode -1) ; Disable menu bar
  (set-fringe-mode 10) ; Give some breathing room
  (setq-default indent-tabs-mode nil)
  (setq scroll-margin 10
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position 1)

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (setq auto-save-list-file-prefix "~/.emacs.d/autosave/")

  (setq auto-save-file-name-transforms
        '((".*" "~/.emacs.d/autosave/" t)))
#+end_src
** Line numbers
#+begin_src emacs-lisp
    (setq display-line-numbers-type 'relative)
    (global-display-line-numbers-mode t)

    ;; Disable line numbers for some modes
    (dolist (mode '(org-mode-hook
                    term-mode-hook
                    eshell-mode-hook
                    vterm-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** Font Config
#+begin_src emacs-lisp
  (set-face-attribute 'variable-pitch nil :font "Ubuntu" :height 130 :weight 'regular)
  (set-face-attribute 'default nil :font "Berkeley Mono" :height 130 :weight 'regular)
  (add-to-list 'default-frame-alist
               '(font . "VictorMono Nerd Font-13"))
  (add-to-list 'default-frame-alist
               '(font . "Ubuntu-13"))
  (add-to-list 'default-frame-alist
               '(font . "Berkeley Mono-13"))
#+end_src
* Packages Configuration
** Setting up packages
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/") t)
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
* Keyboard 
** General Keybindings
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)
    (general-create-definer alele/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC")

    (alele/leader-keys
      "f"  '(:ignore t :wk "find")
      "fc"  ' ((lambda () (interactive) (find-file "~/.emacs.d/README.org")) :wk "Edit emacs config")
      "ff" '(counsel-find-file :wk "Find File")
      "fr" '(:ignore :wk "Find Ramos")
      "frp" '((lambda () (interactive) (counsel-find-file nil "~/Documents/PSS/")) :wk "PSS")
      "frm" '((lambda () (interactive) (counsel-find-file nil "~/Documents/Memes/")) :wk "Memes")
      "frb" '((lambda () (interactive) (counsel-find-file nil "~/Documents/BDeDatos/")) :wk "Batos")
      "frw" '((lambda () (interactive) (counsel-find-file nil "~/Documents/Web/")) :wk "Web")
      )


    (alele/leader-keys
      "SPC"  '(counsel-M-x :wk "find")
      )

    (alele/leader-keys
      "t"  '(:ignore :wk "theme")
      "tt"  '(ef-themes-toggle :wk "Toggle Dark/Light Mode")
      )

    (alele/leader-keys
      "e"  '(:ignore :wk "Eglot")
      "ef"  '(eglot-format-buffer :wk "Format current buffer")
      "ec"  '(eglot-code-actions :wk "Code actions")
      )

    (alele/leader-keys
      "b" '(:ignore t :wk "buffer")
      "b b" '(switch-to-buffer :wk "Switch buffer")
      "b i" '(counsel-ibuffer :wk "Ibuffer")
      "b k" '(kill-this-buffer :wk "Kill this buffer")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Reload buffer"))

    (alele/leader-keys
      "v"  '(evil-window-vsplit :wk "Vertical Split")
      "s"  '(evil-window-split :wk "Horizontal Split")

      "h"  '(evil-window-left :wk "Move to left window")
      "j"  '(evil-window-down :wk "Move to down window")
      "k"  '(evil-window-up :wk "Move to up window")
      "l"  '(evil-window-right :wk "Move to right window")

      "c"  '(evil-window-delete :wk "Delete window"))

    (alele/leader-keys
      "S"  '(:ignore :wk "Spotify options")
      "St" '(smudge-track-search :wk "Search track")
      "Sp" '(smudge-controller-toggle-play :wk "Play/Pause")
      "Sm" '(smudge-my-playlists :wk "Show My playlists")
      ))
#+end_src  

** Which-key
#+begin_src emacs-lisp
  (use-package which-key
  :diminish which-key-mode
  :init
  (which-key-mode)
  (which-key-setup-minibuffer)
  :config
  (setq which-key-idle-delay 0.1)
  (setq which-key-prefix-prefix "◉ ")
  (setq which-key-sort-order 'which-key-key-order-alpha
        which-key-min-display-lines 3
        which-key-max-display-columns nil))
#+end_src

* Completion Configuration
** Corfu (The cmp equivalent for Emacs) 
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                 ; Allows cycling through candidates
    (corfu-auto t)                  ; Enable auto completion
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.3)
    (corfu-popupinfo-delay '(0.5 . 0.2))
    (corfu-preview-current 'insert) ; insert previewed candidate
    (corfu-preselect 'prompt)
    (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets

    ;; Optionally use TAB for cycling, default is `corfu-complete'.
    :bind (:map corfu-map
                ("M-b"      . corfu-insert-separator)
                ("TAB"        . corfu-next)
                ([tab]        . corfu-next)
                ("S-TAB"      . corfu-previous)
                ([backtab]    . corfu-previous)
                ("S-<return>" . corfu-insert)
                ("RET"        . nil))

    :init
    (global-corfu-mode)
    (corfu-history-mode)
    (corfu-popupinfo-mode) ; Popup completion info
    :config
    (add-hook 'eshell-mode-hook
              (lambda () (setq-local corfu-quit-at-boundary t
                                     corfu-quit-no-match t
                                     corfu-auto nil)
                (corfu-mode))))


  (use-package cape
    :init
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    ;; kinda confusing re length, WIP/TODO
    ;; :hook (org-mode . (lambda () (add-to-list 'completion-at-point-functions #'cape-dabbrev)))
    ;; :config
    ;; (setq dabbrev-check-other-buffers nil
    ;;       dabbrev-check-all-buffers nil
    ;;       cape-dabbrev-min-length 6)
    )
#+end_src

** Ivy - Counsel - Swiper

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)       
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (define-key ivy-mode-map [remap execute-extended-command] 'counsel-M-x)
    (ivy-mode 1))



  (use-package counsel)
  (use-package swiper)

#+end_src

** Snippets
Configure snippets (so hard!)

#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :defer 5
    :config
    (yas-global-mode 1))
  (use-package yasnippet-snippets)

  (use-package doom-snippets
    :load-path "/home/mmolina/.local/emacs/doom_snippets"
    :after yasnippet)

  (use-package yasnippet-capf
    :after cape
    :config
    (add-to-list 'completion-at-point-functions #'yasnippet-capf))
#+end_src
** Eglot Configuration
#+begin_src emacs-lisp
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'python-mode-hook 'eglot-ensure)
  (add-hook 'zig-mode-hook 'eglot-ensure)
#+end_src
*** Rust Config
#+begin_src emacs-lisp
  (use-package rust-mode)
  (add-to-list 'exec-path (expand-file-name "~/.cargo/bin"))
  (add-hook 'rust-mode-hook
            (lambda () (setq indent-tabs-mode nil))
            (lambda () (prettify-symbols-mode)))

  (setq rust-format-on-save t)
#+end_src
*** Python Config
#+begin_src emacs-lisp
  (use-package python-mode)

  (use-package python-black
  :demand t
  :after python
  :hook (python-mode . python-black-on-save-mode-enable-dwim))
#+end_src
*** Emmet Config

* Theming
** Themes
*** Doom Themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src
*** Modus Theme 
#+begin_src emacs-lisp
  (setq modus-themes-completions
        (quote ((matches . (extrabold background intense))
                (selection . (semibold accented intense))
                (popup . (accented)))))

  (setq modus-themes-region '(bg-only))
  (setq modus-themes-org-blocks 'tinted-background)
  (setq modus-themes-headings
        '((1 . (rainbow background 1.4))
          (2 . (rainbow background 1.3))
          (3 . (rainbow bold 1.1))
          (t . (semilight 1.1))))

  ;; (setq modus-themes-common-palette-overrides
  ;;       `(
  ;;         ;; From the section "Make the mode line borderless"
  ;;         (border-mode-line-active unspecified)
  ;;         (border-mode-line-inactive unspecified)

  ;;         ;; From the section "Make matching parenthesis more or less intense"
  ;;         (bg-paren-match bg-magenta-intense)
  ;;         (underline-paren-match fg-main)

  ;;         (bg-tab-current bg-magenta-intense)
  ;;         (bg-tab-bar bg-cyan-nuanced)
  ;;         (bg-tab-other bg-cyan-subtle)
  ;;         ;; And expand the preset here.  Note that the ,@ works because
  ;;         ;; we use the backtick for this list, instead of a straight
  ;;         ;; quote.
  ;;         ,@modus-themes-preset-overrides-intense))


(load-theme 'modus-vivendi t)
#+end_src
*** Ef Themes
#+begin_src emacs-lisp
   ;; Make customisations that affect Emacs faces BEFORE loading a theme
  ;; (any change needs a theme re-load to take effect).
  (require 'ef-themes)

  ;; If you like two specific themes and want to switch between them, you
  ;; can specify them in `ef-themes-to-toggle' and then invoke the command
  ;; `ef-themes-toggle'.  All the themes are included in the variable
  ;; `ef-themes-collection'.
  (setq ef-themes-to-toggle '(ef-bio ef-spring))

  (setq ef-themes-headings ; read the manual's entry or the doc string
        '((0 light 1.9)
          (1  light 1.8)
          (2  regular 1.7)
          (3  regular 1.6)
          (4  regular 1.5)
          (5  1.4) ; absence of weight means `bold'
          (6  1.3)
          (7  1.2)
          (t  1.1)))


  ;; Disable all other themes to avoid awkward blending:
  (mapc #'disable-theme custom-enabled-themes)


  ;; OR use this to load the theme which also calls `ef-themes-post-load-hook':
  (ef-themes-select 'ef-bio)


#+end_src

** Parenthesis styling
#+begin_src emacs-lisp
    (use-package paren
    :ensure nil
    :config
    (setq show-paren-delay 0.1
          show-paren-hightlight-openparen t
          show-paren-when-point-inside-paren t
          show-paren-when-point-in-periphery t)
    (show-paren-mode 1))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  
  (use-package smartparens
    :config

    (smartparens-global-mode))
#+end_src

** Modeline Configuration

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-buffer-file-name-style 'auto
          doom-modeline-enable-word-count t
          doom-modeline-buffer-encoding nil
          doom-modeline-icon t
          doom-modeline-modal-icon nil
          doom-modeline-major-mode-icon t
          doom-modeline-major-mode-color-icon t
          doom-modeline-bar-width 3
          doom-modeline-height 40
          )
    )
#+end_src

* Evil Mode

This is basically the vim emulation layer, basically a fully implemented vim editor inside emacs

#+begin_src emacs-lisp
  (unless (package-installed-p 'evil)
    (package-install 'evil))

  (setq evil-want-C-u-scroll t)
  (require 'evil)
  (evil-set-undo-system 'undo-redo)
  (evil-mode 1)

  (use-package evil-escape)
  (setq-default evil-escape-key-sequence "jj")
  (setq-default evil-escape-delay 0.3)
  (setq evil-escape-inhibit-functions '(evil-visual-state-p))
  (setq-default evil-escape-excluded-major-modes '(dired-mode neotree-mode evil-visual-state)) 
  (evil-escape-mode 1)
#+end_src

* Org Mode 
** Org Mode Packages
*** Org-bullets
Firstly we just configure the bullets to look pretty :3

#+begin_src emacs-lisp
  (use-package org-superstar)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (setq org-superstar-headline-bullets-list '("✸" "✿" "⁖" "○" "◉"))
#+end_src

*** Evil-org
#+begin_src emacs-lisp
(use-package evil-org
  :diminish evil-org-mode
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme))))

(require 'evil-org-agenda)
(evil-org-agenda-set-keys)
#+end_src
*** Org-appear
#+begin_src emacs-lisp
  (use-package org-appear
  :commands (org-appear-mode)
  :hook (org-mode . org-appear-mode)
  :init
  (setq org-hide-emphasis-markers t             ;; A default setting that needs to be t for org-appear
        org-appear-autoemphasis t               ;; Enable org-appear on emphasis (bold, italics, etc)
        org-appear-autolinks nil                ;; Don't enable on links
        org-appear-autosubmarkers t))   ;; Enable on subscript and superscript
#+end_src

** Org Startup
*** Org Setup
#+begin_src emacs-lisp
  (defun alele/org-setup()
    (org-indent-mode)
    (visual-line-mode 1)
    (visual-fill-column-mode 1)

    (setq visual-fill-column-width 120
          visual-fill-column-center-text t)
    (setq-local line-spacing 3))
#+end_src

** Org Mode Config
*** Preamble
#+begin_src emacs-lisp
(use-package org
  ;; :pin elpa
  :hook (org-mode . alele/org-setup)
  :hook (org-capture-mode . evil-insert-state) ;; Start org-capture in Insert state by default
  :diminish org-indent-mode
  :diminish visual-line-mode
  :config
#+end_src
*** Visuals
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t) ;; Syntax highlighting in org src blocks
  (setq org-highlight-latex-and-related '(native)) ;; Highlight inline LaTeX
  (setq org-startup-folded 'showeverything)
  (setq org-image-actual-width 300)
  (setq org-fontify-whole-heading-line t)
  (setq org-pretty-entities t)
#+end_src
*** Problem?
#+begin_src emacs-lisp
  (evil-org-mode))

#+end_src

* Terminal
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src

* Misc
#+begin_src emacs-lisp
  (use-package smudge
    :config
    (setq smudge-oauth2-client-secret "569e360be03047849f69c8c0cb13e633")
    (setq smudge-oauth2-client-id "db6445ff85114ff085b167f60e79f024")
    (setq smudge-status-location 'modeline)
    (setq smudge-transport 'connect)
    )

#+end_src

** RSS Feed

#+begin_src emacs-lisp
  (setq elfeed-feeds (quote
                      (("https://www.reddit.com/r/linux.rss" linux-reddit))))
#+end_src

* Git
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
